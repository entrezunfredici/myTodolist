penapi: '3.0.2'
info:
  title: todolist_api
  version: '1.0'
servers:
  - url: '{protocol}://{server}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      server:
        default: localhost:9000
tags:
  - name: "users"
    description: "Tout les utilisateur"
  - name: "todos"
    description: "Toutes les chosesd a faire"
  - name: "userstodo"
    description: "lien entre les utilisateurs et les choses a faire"
paths:

  /users/name/{username}:
    get:
      tags:
        - "users"
      summary: "récupérer un utilisateur par son username"
      operationId: getUserByUsername
      parameters:
        - name: "username"
          in: "path"
          description: "Le nom d'utilisateur"
          required: true
          schema: 
            type: "string"
      responses:
        "200":
          description: "L'utilisateur recherché est retourné"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/users'
        "404":
          description: "user not found"

  /users/{id}:
    get:
      tags:
        - "users"
      summary: "récupérer un utilisateur par son id"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: path
          description: "L'identifiant de l'utilisateur"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "L'utilisateur à été trouvé"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/users'
        "404":
          description: "user not found"
    delete:
      tags:
        - "users"
      summary: "supprimer un utilisateur"
      operationId: "deleteUserById"
      parameters:
        - name: "id"
          in: "path"
          description: "L'identifiant de l'utilisateur"
          required: true
          schema: 
            type: "integer"
      responses:
        "201":
          description: "L'utilisateur à été supprimé"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/users'
        "404":
          description: "user not found"

  /users/register:
    post: 
      tags:
        - "users"
      summary: "ajouter un utilisateur"
      operationId: addUser
      requestBody:
        description: "doit contenir les informations essentiels soit l'username, le password et le mail"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
      responses:
        "201":
          description: "Ajoute un utilisateur"
          content: true
        "400": 
          description: "Un champs essentiels n'est pas présent ou incorrect (username, password, mail)"

  /users/login:
    post: 
      tags:
        - "users"
      summary: "connecter un utilisateur"
      operationId: loginUser
      requestBody:
        description: "doit contenir les informations essentiels soit l'username et le password"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'

  /todo/{id}:
    get:
      tags:
        - "todos"
      summary: "récupérer une chose a faire par son id"
      operationId: "getTodoById"
      parameters:
        - name: "id"
          in: path
          description: "L'identifiant de la chose a faire"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "La chose a faire à été trouvé"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/todo'
        "404":
          description: "todo not found"
    delete:
      tags:
        - "todos"
      summary: "supprimer une chose a faire"
      operationId: "deleteTodoById"
      parameters:
        - name: "id"
          in: "path"
          description: "L'identifiant de la chose a faire"
          required: true
          schema: 
            type: "integer"
      responses:
        "201":
          description: "La chose a faire à été supprimé"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/todo'
        "404":
          description: "todo not found"

  /todo/title/{title}:
    get:
      tags:
        - "todos"
      summary: "récupérer une chose a faire par son titre"
      operationId: "getTodoByName"
      parameters:
        - title: "title"
          in: "path"
          description: "Le titre de la chose a faire"
          required: true
          schema: 
            type: "string"
      responses:
        "200":
          description: "La chose a faire à été trouvé"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/todo'
        "404":
          description: "todo not found"

  /todo/add:
    post: 
      tags:
        - "todos"
      summary: "ajouter une chose a faire"
      operationId: addTodo
      requestBody:
        description: "doit contenir les informations essentiels soit le nom, la description et la date"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todo'
      responses:
        "201":
          description: "Ajoute une chose a faire"
          content: true
        "400": 
          description: "Un champs essentiels n'est pas présent ou incorrect (name, description, date)"

  /todo/edit:
    post: 
      tags:
        - "todos"
      summary: "modifier une chose a faire"
      operationId: editTodo
      requestBody:
        description: "doit contenir les informations essentiels soit l'id, le nom, la description et la date"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todo'
      responses:
        "201":
          description: "La chose a faire à été modifié"
          content: true
        "400": 
          description: "Un champs essentiels n'est pas présent ou incorrect (id, name, description, date)"


components:
  schemas:
    users:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        mail:
          type: string
    todo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        date:
          type: string
    usersTodos:
      type: object
      properties:
        id:
          type: integer
        id_user:
          type: integer
        id_todo:
          type: integer